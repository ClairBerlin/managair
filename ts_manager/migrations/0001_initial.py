# Generated by Django 3.0.10 on 2020-10-08 11:29

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('device_manager', '0003_auto_20201004_1938'),
    ]

    operations = [
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_s', models.PositiveIntegerField()),
                ('co2_ppm', models.PositiveSmallIntegerField()),
                ('temperature_celsius', models.DecimalField(decimal_places=1, max_digits=3, null=True)),
                ('rel_humidity', models.PositiveSmallIntegerField(null=True)),
                ('measurement_status', models.CharField(choices=[('M', 'measured value'), ('R', 'replacement value'), ('E', 'measurement error')], default=[('M', 'measured value'), ('R', 'replacement value'), ('E', 'measurement error')], max_length=1)),
                ('node_ref', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='device_manager.Node')),
            ],
        ),
        migrations.AddConstraint(
            model_name='sample',
            constraint=models.UniqueConstraint(fields=('node_ref', 'timestamp_s'), name='unique_sampling_times_per_node'),
        ),
        migrations.AddConstraint(
            model_name='sample',
            constraint=models.CheckConstraint(check=models.Q(rel_humidity__lte=100), name='rel_humidity_percent'),
        ),
        migrations.AddConstraint(
            model_name='sample',
            constraint=models.CheckConstraint(check=models.Q(temperature_celsius__gte=-20), name='not_too_cold'),
        ),
        migrations.AddConstraint(
            model_name='sample',
            constraint=models.CheckConstraint(check=models.Q(temperature_celsius__lte=40), name='not_too_hot'),
        ),
        migrations.AddConstraint(
            model_name='sample',
            constraint=models.CheckConstraint(check=models.Q(co2_ppm__lte=10000), name='co2_upper_limit'),
        ),
    ]
