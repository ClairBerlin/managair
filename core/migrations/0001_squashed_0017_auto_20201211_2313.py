# Generated by Django 3.1.4 on 2020-12-11 23:15

import core.models.inventory
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    replaces = [('core', '0001_initial'), ('core', '0002_delete_profile'), ('core', '0003_auto_20201025_2028'), ('core', '0004_auto_20201026_0900'), ('core', '0005_auto_20201026_0918'), ('core', '0006_auto_20201027_1030'), ('core', '0007_auto_20201027_1405'), ('core', '0008_auto_20201029_1726'), ('core', '0009_auto_20201104_2058'), ('core', '0010_auto_20201109_0814'), ('core', '0011_auto_20201109_0823'), ('core', '0012_roomnodeinstallation_is_public'), ('core', '0013_node_description'), ('core', '0013_auto_20201204_1320'), ('core', '0014_merge_20201204_1937'), ('core', '0015_roomnodeinstallation_image'), ('core', '0016_auto_20201211_1809'), ('core', '0017_auto_20201211_2313')]

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street1', models.CharField(max_length=50)),
                ('street2', models.CharField(blank=True, max_length=50, null=True)),
                ('zip', models.CharField(max_length=5)),
                ('city', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('O', 'User has full control of the organization and its inventory.'), ('A', 'User can perform a restricted set of tasks in the organization.'), ('I', "User can inspect the organization's inventory.")], default='I', max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('device_id', models.CharField(max_length=32, unique=True)),
                ('alias', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='NodeInstallation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_timestamp', models.PositiveIntegerField()),
                ('to_timestamp', models.PositiveIntegerField(null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='node_installations', to='core.node')),
            ],
            options={
                'ordering': ['-from_timestamp'],
                'get_latest_by': 'from_timestamp',
            },
        ),
        migrations.CreateModel(
            name='NodeProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=30, unique=True)),
                ('num_uplink_msgs', models.PositiveIntegerField(default=1)),
                ('num_downlink_msgs', models.PositiveIntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('users', models.ManyToManyField(through='core.Membership', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='auth.user')),
            ],
        ),
        migrations.CreateModel(
            name='Quantity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.CharField(max_length=30, unique=True)),
                ('base_unit', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='NodeFidelity',
            fields=[
                ('node', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='core.node')),
                ('fidelity', models.CharField(choices=[('U', 'node has never reported data'), ('E', 'node did report data recently'), ('M', 'node has not reported data recently'), ('D', 'node has not reported data for some time')], default='U', max_length=1)),
                ('last_contact_s', models.PositiveIntegerField(null=True)),
                ('last_check_s', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sites', to='core.address')),
                ('nodes', models.ManyToManyField(through='core.NodeInstallation', to='core.Node')),
                ('operated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sites', to='core.organization')),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_s', models.PositiveIntegerField()),
                ('co2_ppm', models.PositiveSmallIntegerField()),
                ('temperature_celsius', models.DecimalField(decimal_places=1, max_digits=3, null=True)),
                ('rel_humidity_percent', models.PositiveSmallIntegerField(null=True)),
                ('measurement_status', models.CharField(choices=[('M', 'measured value'), ('R', 'replacement value'), ('E', 'measurement error')], default='M', max_length=1)),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='core.node')),
            ],
            options={
                'ordering': ['-timestamp_s'],
                'get_latest_by': 'timestamp_s',
            },
        ),
        migrations.CreateModel(
            name='NodeModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('trade_name', models.CharField(max_length=30)),
                ('manufacturer', models.CharField(max_length=30)),
                ('sensor_type', models.CharField(max_length=100)),
                ('quantities', models.ManyToManyField(related_name='node_models', to='core.Quantity')),
            ],
        ),
        migrations.AddField(
            model_name='nodeinstallation',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='node_installations', to='core.site'),
        ),
        migrations.AddField(
            model_name='node',
            name='model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nodes', to='core.nodemodel'),
        ),
        migrations.AddField(
            model_name='node',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nodes', to='core.organization'),
        ),
        migrations.AddField(
            model_name='node',
            name='protocol',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nodes', to='core.nodeprotocol'),
        ),
        migrations.AddField(
            model_name='membership',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_membership', to='core.organization'),
        ),
        migrations.AddField(
            model_name='membership',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organization_membership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='address',
            constraint=models.UniqueConstraint(fields=('street1', 'street2', 'zip', 'city'), name='unique_address'),
        ),
        migrations.AddConstraint(
            model_name='site',
            constraint=models.UniqueConstraint(fields=('name', 'operated_by'), name='unique_site_per_organization'),
        ),
        migrations.AddConstraint(
            model_name='sample',
            constraint=models.UniqueConstraint(fields=('node', 'timestamp_s'), name='unique_sampling_times_per_node'),
        ),
        migrations.AddConstraint(
            model_name='sample',
            constraint=models.CheckConstraint(check=models.Q(rel_humidity_percent__lte=100), name='rel_humidity_percent'),
        ),
        migrations.AddConstraint(
            model_name='sample',
            constraint=models.CheckConstraint(check=models.Q(temperature_celsius__gte=-20), name='not_too_cold'),
        ),
        migrations.AddConstraint(
            model_name='sample',
            constraint=models.CheckConstraint(check=models.Q(temperature_celsius__lte=40), name='not_too_hot'),
        ),
        migrations.AddConstraint(
            model_name='sample',
            constraint=models.CheckConstraint(check=models.Q(co2_ppm__lte=10000), name='co2_upper_limit'),
        ),
        migrations.AddConstraint(
            model_name='nodeinstallation',
            constraint=models.UniqueConstraint(fields=('node', 'from_timestamp'), name='unique_node_attribution'),
        ),
        migrations.AddConstraint(
            model_name='membership',
            constraint=models.UniqueConstraint(fields=('user', 'organization'), name='unique-membership'),
        ),
        migrations.DeleteModel(
            name='Profile',
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('size_sqm', models.DecimalField(decimal_places=1, max_digits=5, null=True)),
                ('max_occupancy', models.IntegerField(null=True)),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='core.site')),
            ],
        ),
        migrations.AddConstraint(
            model_name='room',
            constraint=models.UniqueConstraint(fields=('name', 'site'), name='unique_room_per_site'),
        ),
        migrations.AddField(
            model_name='room',
            name='height_m',
            field=models.DecimalField(decimal_places=1, max_digits=3, null=True),
        ),
        migrations.CreateModel(
            name='RoomNodeInstallation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_timestamp', models.PositiveIntegerField()),
                ('to_timestamp', models.PositiveIntegerField(null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='room_installation', to='core.node')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='node_installations', to='core.room')),
            ],
            options={
                'ordering': ['-from_timestamp'],
                'get_latest_by': 'from_timestamp',
            },
        ),
        migrations.AddConstraint(
            model_name='roomnodeinstallation',
            constraint=models.UniqueConstraint(fields=('node', 'from_timestamp'), name='unique_node_installation'),
        ),
        migrations.RemoveField(
            model_name='site',
            name='nodes',
        ),
        migrations.AddField(
            model_name='room',
            name='nodes',
            field=models.ManyToManyField(through='core.RoomNodeInstallation', to='core.Node'),
        ),
        migrations.DeleteModel(
            name='NodeInstallation',
        ),
        migrations.AlterModelOptions(
            name='roomnodeinstallation',
            options={'get_latest_by': 'from_timestamp_s', 'ordering': ['-from_timestamp_s']},
        ),
        migrations.RemoveConstraint(
            model_name='roomnodeinstallation',
            name='unique_node_installation',
        ),
        migrations.RenameField(
            model_name='roomnodeinstallation',
            old_name='from_timestamp',
            new_name='from_timestamp_s',
        ),
        migrations.RenameField(
            model_name='roomnodeinstallation',
            old_name='to_timestamp',
            new_name='to_timestamp_s',
        ),
        migrations.AlterField(
            model_name='membership',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.organization'),
        ),
        migrations.AlterField(
            model_name='membership',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='organization',
            name='users',
            field=models.ManyToManyField(related_name='organizations', through='core.Membership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='room',
            name='nodes',
            field=models.ManyToManyField(related_name='rooms', through='core.RoomNodeInstallation', to='core.Node'),
        ),
        migrations.AddConstraint(
            model_name='roomnodeinstallation',
            constraint=models.UniqueConstraint(fields=('node', 'from_timestamp_s'), name='unique_node_installation'),
        ),
        migrations.AlterModelOptions(
            name='address',
            options={'get_latest_by': 'city', 'ordering': ['city', 'street1']},
        ),
        migrations.AlterModelOptions(
            name='membership',
            options={'ordering': ['role', 'organization']},
        ),
        migrations.AlterModelOptions(
            name='organization',
            options={'get_latest_by': 'name', 'ordering': ['name']},
        ),
        migrations.AlterModelOptions(
            name='room',
            options={'get_latest_by': 'name', 'ordering': ['name']},
        ),
        migrations.AlterModelOptions(
            name='site',
            options={'get_latest_by': 'name', 'ordering': ['name']},
        ),
        migrations.AlterField(
            model_name='roomnodeinstallation',
            name='node',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='installations', to='core.node'),
        ),
        migrations.AlterField(
            model_name='roomnodeinstallation',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='installations', to='core.room'),
        ),
        migrations.AlterField(
            model_name='node',
            name='alias',
            field=models.CharField(max_length=100),
        ),
        migrations.AlterModelOptions(
            name='sample',
            options={'get_latest_by': 'timestamp_s', 'ordering': ['timestamp_s']},
        ),
        migrations.AlterModelOptions(
            name='node',
            options={'get_latest_by': 'eui64', 'ordering': ['eui64']},
        ),
        migrations.RenameField(
            model_name='node',
            old_name='device_id',
            new_name='eui64',
        ),
        migrations.AlterField(
            model_name='membership',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='core.organization'),
        ),
        migrations.AlterField(
            model_name='membership',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to=settings.AUTH_USER_MODEL),
        ),
        migrations.RemoveConstraint(
            model_name='site',
            name='unique_site_per_organization',
        ),
        migrations.RenameField(
            model_name='site',
            old_name='operated_by',
            new_name='operator',
        ),
        migrations.AddConstraint(
            model_name='site',
            constraint=models.UniqueConstraint(fields=('name', 'operator'), name='unique_site_per_organization'),
        ),
        migrations.AddField(
            model_name='roomnodeinstallation',
            name='is_public',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='node',
            name='description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='roomnodeinstallation',
            name='to_timestamp_s',
            field=models.PositiveIntegerField(blank=True, default=2147483647),
        ),
        migrations.AddField(
            model_name='roomnodeinstallation',
            name='image',
            field=models.ImageField(blank=True, null=True, upload_to=core.models.inventory.image_filename_to_uuid, verbose_name='Installation Photo'),
        ),
    ]
